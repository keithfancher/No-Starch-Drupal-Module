<?php
// $Id$


module_load_include('inc', 'nostarch', 'nostarch.preorder');
module_load_include('inc', 'nostarch', 'nostarch.orderops');


/*
 * SPANK YOU HELPY HELPERTON
 */
function nostarch_help($path, $arg) {
  switch($path) {
    case "admin/help#nostarch":
      $output = '<p>'. t("No Starch Press custom module -- does custom No Starch stuff.  You don't need any help with this.  Seriously.  Get out.") .'</p>';
      return $output;
  }
}


/*
 * Override crappy uc_product CSS stuff
 */
function nostarch_init() {
  drupal_add_css(drupal_get_path('module', 'nostarch') .'/nostarch.css');
}


/*
 * Is there a uc_coupon in the cart? TRUE or FALSE!
 */
function nostarch_cart_contains_coupon($items=NULL) {
  if(!$items) {
    $items = uc_cart_get_contents();
  }

  foreach($items as $item) {
    if($item->module == 'uc_coupon') {
      return TRUE;
    }
  }

  return FALSE;
}


/*
 * Implementation of hook_link() -- use to ADD links to nodes
 */
function nostarch_link($type, $object, $teaser = FALSE) {

  // show number of comments under blog post
  if($type == 'node' && $object->type == 'blog') {
    $node = $object; // just to make things less confusing...

    $all = comment_num_all($node->nid);
    if($all) {
      $links['blog_comments'] = array(
        'title' => format_plural($all, '1 comment', '@count comments'),
        'href' => "node/$node->nid",
        'attributes' => array('title' => t('Jump to the first comment of this posting.')),
        'fragment' => 'comments',
      );
    }
  }

  return $links;
}


/*
 * Implementation of hook_link_alter() -- use to REMOVE/MODIFY links from nodes
 */
function nostarch_link_alter(&$links, $node) {

  // remove "user's blog" links in blog posts (because they suck and are ugly)
  if($node->type == 'blog') {
    unset($links['blog_usernames_blog']);
  }
}


/*
 * Implementation of hook_form_alter()
 */
function nostarch_form_alter(&$form, &$form_state, $form_id) {

  // change "add to cart" to "pre-order" for books in taxonomy category 18
  if(strcmp(substr($form_id, 0, 28), 'uc_product_add_to_cart_form_') == 0) {
    $node = $form['node']['#value'];
    if(nostarch_is_preorder($node)) {
      $form['submit']['#value'] = '  Pre-Order  ';
    }
  }

  // hide "hidden" categories in the advanced search page
  if($form_id == 'search_form') {
    $voc = taxonomy_get_vocabularies();
    $hvoc = variable_get('taxonomy_hide_vocabularies', array());

    foreach($hvoc as $vid)
      unset($form['advanced']['category']['#options'][$voc[$vid]->name]);

    // Also unset the "special" category (5). Users shouldn't see that, but we
    // can't hide it using the taxonomy_hide module because it fucks up the
    // above check for pre-orders.
    unset($form['advanced']['category']['#options'][$voc[5]->name]);
  }

  // if we're at the checkout page
  if($form_id == 'uc_cart_checkout_form') {
    if(nostarch_cart_contains_preorders()) {
      if(!nostarch_cart_is_valid_preorder()) {
        nostarch_invalid_preorder_message();
      }
    }

    // Might unset Paypal as an option if they have a pre-order...
    // USEFUL FOR DEBUGGING:
    // drupal_set_message(print_r($form['panes']['payment']['payment_method']['#options']));
    // drupal_set_message(print_r($form));
  }
}


/*
 * Implemenatation of hook_cart_item()
 */
function nostarch_cart_item($op, &$item) {
  switch($op) {
    case 'load':
      $product_node = node_load($item->nid);
      // indicate pre-orders in the cart
      if(nostarch_is_preorder($product_node)) {
        $item->title = $item->title . " (PRE-ORDER)";
      }
      break;
  }
}


/*
 * Implementation of hook_cart_pane()
 *
 * Using this to check for pre-orders when we're in the cart. Can't use
 * hook_order() for this since that isn't called until the order is created
 * (which doesn't happen until payment info is entered)
 *
 * Note that this is a bit of a hack -- we're not creating or returning any
 * panes here. Move this to nostarch_form_alter()?
 */
function nostarch_cart_pane($items) {
  // if there are no items, don't bother!
  if(!$items) {
    return;
  }

  if(nostarch_cart_contains_preorders($items)) {
    if(!nostarch_cart_is_valid_preorder($items)) {
      nostarch_invalid_preorder_message();
    }
  }

  // check for one or two manga guides in cart and tell the user about the "buy
  // 2 get 1 free" promo
  $manga_count = 0;
  foreach($items as $item) {
    // in manga taxonomy, category 3
    $product_node = node_load($item->nid);
    if(isset($product_node->taxonomy[3])) {
      $manga_count += $item->qty;
    }
  }
  if($manga_count == 1 || $manga_count == 2) {
    drupal_set_message('<em>Psst.</em> If you buy 2 Manga Guides, you\'ll get a third one free. Why not <a href="/catalog/manga">take another look</a>?', 'warning', FALSE);
  }

  // if at least one shippable item tell them about the t-shirt deal
  if(uc_cart_is_shippable()) {
    drupal_set_message('Hey No Starch fan! If you spend $75 or more we\'ll throw a free NSP t-shirt in with your order! Just tell us your size in the order commments. (<a class="colorbox-link" href="/cbhtml/tshirtfineprint.htm">Fine print</a>)', 'warning', FALSE);
  }
}


/*
 * Implementation of hook_order()
 */
function nostarch_order($op, &$order, $arg2) {
  switch($op) {
    case 'load':
    case 'new':
      if(nostarch_order_contains_preorders($order)) {
        if(!nostarch_is_valid_preorder($order)) {
          nostarch_invalid_preorder_message();
        }
        else {
          // it IS a valid pre-order... check for payment method!
          if($order->payment_method == 'paypal_wps') {
            drupal_set_message('<strong>WARNING: If you pay with Paypal, we have to charge you immediately&mdash;we can NOT wait until your item ships to charge you. This is a limitation put in place by PayPal.<br><br> If you do not want to be charged until your pre-ordered item ships, please hit the Back button below and choose to pay by credit card.</strong>', 'warning', FALSE);
          }
        }
      }
      break;

    case 'submit':
      // if they click the final "submit order" button anyway, don't process
      // their payment and warn them again
      if(nostarch_order_contains_preorders($order)) {
        if(!nostarch_is_valid_preorder($order)) {
          return array(array('pass' => FALSE, 'message' => '<strong>YOUR ORDER WAS NOT COMPLETED; YOU WERE NOT CHARGED.</strong>'));
        }
      }
      break;
  }
}


/*
 * Allows for a discount to be modified when it's being loaded/saved/deleted
 */
function nostarch_uc_discount($op, &$discount, $order = NULL) {
  switch($op) {
    case 'load':
      // Modify a discount to not be applied unless a condition passes
      if(!is_null($order)) {

        // if there's a uc_coupon discount, don't apply the special discount
        if(nostarch_cart_contains_coupon()) {
          $discount->is_active = FALSE;
        }

        // If there's a product kit in the order, don't apply discount.
        // TODO: still apply discount to non-product-kit products instead
        // of this catch-all approach.
        if(is_array($order->products) && !empty($order->products)) {
          foreach($order->products as $product) {
            if(!empty($product->data['kit_id'])) {
              $discount->is_active = FALSE;
            }
          }
        }
      }
      break;
  }
}


/*
 * Shows a list of "related" nodes... in this case, products that are in the
 * same "catalog" taxonomy (or taxonomies) as the specified node.
 *
 * The idea is that this can be easily stuck in a block and shown on product
 * pages with something like this:
 *
 * nostarch_show_related_nodes(nostarch_get_current_node_id(), 5);
 */
function nostarch_show_related_nodes($nid, $num_nodes) {
  // "catalog" is vocabulary number 2
  $terms = taxonomy_node_get_terms_by_vocabulary(node_load($nid), 2);
  $sql = "SELECT DISTINCT node.title, node.nid, node.title FROM node, term_node where (node.nid = term_node.nid) and (node.status = 1) AND (";
  $count = 0;

  // If the node doesn't have any taxonomy terms associated with it, just show
  // some programming books! (That's taxonomy 2.) We have quite a few
  // intentionally "orphaned" books, and this prevents any SQL unhappiness if a
  // user views those pages.
  if(empty($terms)) {
    $sql = $sql . "(term_node.tid = 2)";
  }
  else {
    // Loop through a product's terms, grab "associated" items
    foreach($terms as $term){
      if($count == 0){
        $sql = $sql . "(term_node.tid = " .$term->tid." )";
      }
      else {
        $sql = $sql . " OR (term_node.tid = " .$term->tid." )";
      }
      $count++;
    }
  }

  $end = ") AND (node.nid != $nid) ORDER BY RAND() LIMIT $num_nodes";
  $sql = $sql .$end;

  // query!
  $result = db_query($sql);

  // show some images
  return nostarch_node_image_list($result);
}

/*
 * Similar to Drupal's stock node_title_list() function, but displays images
 * instead. Like node_title_list(), takes a database query result.
 */
function nostarch_node_image_list($result) {
  $output = '';

  while($node = db_fetch_object($result)) {
    $node = node_load($node->nid); // load the *actual* node
    $path = '/sites/default/files/imagecache/product/';
    $image = $node->field_image_cache[0]['filename'];
    $output .= '<a href="' . $node->path . '"><img src="' . $path . $image . '" style="border: 1px solid black;" title="' . $node->title . '"/></a><br /><br />';
  }

  return $output;
}

/*
 * Returns node id for currently viewed node
 */
function nostarch_get_current_node_id() {
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    return arg(1);
  }
}
