<?php
// $Id$


/*
 * Doesn't do jack, I guess
 */
function nostarch_help($path, $arg) {
  switch($path) {
    case "admin/help#nostarch":
      $output = '<p>'. t("No Starch Press custom module -- does custom No Starch stuff.  You don't need any help with this.  Seriously.  Get out.") .'</p>';
      return $output;
  }
}


/*
 * Override crappy uc_product CSS stuff
 */
function nostarch_init() {
  drupal_add_css(drupal_get_path('module', 'nostarch') .'/nostarch.css');
}


/*
 * Takes a node (note -- NOT a product, but the product's node) and returns
 * TRUE if it's a preorder and FALSE otherwise.
 */
function nostarch_is_preorder($product_node) {
  // 18 is preorder...
  return isset($product_node->taxonomy[18]);
}


/*
 * Checks if the current cart contains any pre-orders... useful if we don't
 * have an order object handy. Can pass it an array of items, or it will just
 * use whatever's in the current shopping cart if no argument passed.
 */
function nostarch_cart_contains_preorders($items=NULL) {
  if(!$items) {
    $items = uc_cart_get_contents();
  }

  foreach($items as $item) {
    // is it a pre-order?
    $product_node = node_load($item->nid);
    if(nostarch_is_preorder($product_node)) {
      return TRUE;
    }
  }

  return FALSE;
}


/*
 * Checks if the current cart is a valid pre-order order... useful if we don't
 * have an order object handy. Can pass it an array of items, or it will just
 * use whatever's in the current shopping cart if no argument passed.
 */
function nostarch_cart_is_valid_preorder($items=NULL) {
  if(!$items) {
    $items = uc_cart_get_contents();
  }

  $cart_contains_pre_orders = FALSE;
  $product_count = 0; // only count products, not other line items
  foreach($items as $item) {
    // don't count coupons or other line items
    if($item->module == 'uc_product') {
      $product_count++;
    }

    // is it a pre-order?
    $product_node = node_load($item->nid);
    if(nostarch_is_preorder($product_node)) {
      $cart_contains_pre_orders = TRUE;
    }
  }

  if($product_count == 1 && $cart_contains_pre_orders) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/*
 * Is there a uc_coupon in the cart? TRUE or FALSE!
 */
function nostarch_cart_contains_coupon($items=NULL) {
  if(!$items) {
    $items = uc_cart_get_contents();
  }

  foreach($items as $item) {
    if($item->module == 'uc_coupon') {
      return TRUE;
    }
  }

  return FALSE;
}


/*
 * Returns TRUE if the given order contains one or more pre-order items, FALSE
 * otherwise.
 */
function nostarch_order_contains_preorders($order) {
  foreach($order->products as $prod) {
    $prod_node = node_load($prod->nid);
    if(nostarch_is_preorder($prod_node)) {
      return TRUE;
    }
  }

  return FALSE;
}


/*
 * Takes an order object and returns TRUE if it's a valid pre-order... right
 * now that means there is only one product and that product is a pre-order.
 */
function nostarch_is_valid_preorder($order) {
  // using count() instead of $order->product_count so each product is counted
  // only once, regardless of the quantity of that product in the order
  if(count($order->products) == 1) {
    $prod = $order->products[0]; // load the one product
    if(nostarch_is_preorder(node_load($prod->nid))) { // it's a pre-order
      return TRUE; // one product, a preorder
    }
  }

  return FALSE;
}


/*
 * Shows a message about... INVALID PREORDERS!
 */
function nostarch_invalid_preorder_message() {
  drupal_set_message('<strong>Please note that, due to technical limitations with our payment gateway, each pre-order item must be purchased separately from other items, in its own order. We apologize for any inconvenience this might cause&mdash;we\'re working on getting it fixed!</strong>', 'error', FALSE);
}


/*
 * Implementation of hook_link() -- use to ADD links to nodes
 */
function nostarch_link($type, $object, $teaser = FALSE) {

  // show number of comments under blog post
  if($type == 'node' && $object->type == 'blog') {
    $node = $object; // just to make things less confusing...

    $all = comment_num_all($node->nid);
    if($all) {
      $links['blog_comments'] = array(
        'title' => format_plural($all, '1 comment', '@count comments'),
        'href' => "node/$node->nid",
        'attributes' => array('title' => t('Jump to the first comment of this posting.')),
        'fragment' => 'comments',
      );
    }
  }

  return $links;
}


/*
 * Implementation of hook_link_alter() -- use to REMOVE/MODIFY links from nodes
 */
function nostarch_link_alter(&$links, $node) {

  // remove "user's blog" links in blog posts (because they suck and are ugly)
  if($node->type == 'blog') {
    unset($links['blog_usernames_blog']);
  }
}


/*
 * Implementation of hook_form_alter()
 */
function nostarch_form_alter(&$form, &$form_state, $form_id) {

  // change "add to cart" to "pre-order" for books in taxonomy category 18
  if(strcmp(substr($form_id, 0, 28), 'uc_product_add_to_cart_form_') == 0) {
    $node = $form['node']['#value'];
    if(nostarch_is_preorder($node)) {
      $form['submit']['#value'] = '  Pre-Order  ';
    }
  }

  // hide "hidden" categories in the advanced search page
  if($form_id == 'search_form') {
    $voc = taxonomy_get_vocabularies();
    $hvoc = variable_get('taxonomy_hide_vocabularies', array());

    foreach($hvoc as $vid)
      unset($form['advanced']['category']['#options'][$voc[$vid]->name]);

    // Also unset the "special" category (5). Users shouldn't see that, but we
    // can't hide it using the taxonomy_hide module because it fucks up the
    // above check for pre-orders.
    unset($form['advanced']['category']['#options'][$voc[5]->name]);
  }

  // if we're at the checkout page
  if($form_id == 'uc_cart_checkout_form') {
    if(nostarch_cart_contains_preorders()) {
      if(!nostarch_cart_is_valid_preorder()) {
        nostarch_invalid_preorder_message();
      }
    }

    // Might unset Paypal as an option if they have a pre-order...
    // USEFUL FOR DEBUGGING:
    // drupal_set_message(print_r($form['panes']['payment']['payment_method']['#options']));
    // drupal_set_message(print_r($form));
  }
}


/*
 * Implemenatation of hook_cart_item()
 */
function nostarch_cart_item($op, &$item) {
  switch($op) {
    case 'load':
      $product_node = node_load($item->nid);
      // indicate pre-orders in the cart
      if(nostarch_is_preorder($product_node)) {
        $item->title = $item->title . " (PRE-ORDER)";
      }
      break;
  }
}


/*
 * Implementation of hook_cart_pane()
 *
 * Using this to check for pre-orders when we're in the cart. Can't use
 * hook_order() for this since that isn't called until the order is created
 * (which doesn't happen until payment info is entered)
 *
 * Note that this is a bit of a hack -- we're not creating or returning any
 * panes here. Move this to nostarch_form_alter()?
 */
function nostarch_cart_pane($items) {
  if(nostarch_cart_contains_preorders($items)) {
    if(!nostarch_cart_is_valid_preorder($items)) {
      nostarch_invalid_preorder_message();
    }
  }

  // check for one or two manga guides in cart and tell the user about the "buy
  // 2 get 1 free" promo
  //
  // TODO: uncomment this when the promo goes live
  $manga_count = 0;
  foreach($items as $item) {
    // in manga taxonomy, category 3
    $product_node = node_load($item->nid);
    if(isset($product_node->taxonomy[3])) {
      $manga_count += $item->qty;
    }
  }
  if($manga_count == 1 || $manga_count == 2) {
    drupal_set_message('<em>Psst.</em> If you buy 2 Manga Guides, you\'ll get a third one free. Why not <a href="/catalog/manga">take another look</a>?', 'warning', FALSE);
  }

  // if at least one shippable item tell them about the t-shirt deal
  if(uc_cart_is_shippable()) {
    drupal_set_message('Hey No Starch fan! If you spend $75 or more we\'ll throw a free NSP t-shirt in with your order! Just tell us your size in the order commments. (<a class="colorbox-link" href="/cbhtml/tshirtfineprint.htm">Fine print</a>)', 'warning', FALSE);
  }
}


/*
 * Implementation of hook_order()
 */
function nostarch_order($op, &$order, $arg2) {
  switch($op) {
    case 'load':
    case 'new':
      if(nostarch_order_contains_preorders($order)) {
        if(!nostarch_is_valid_preorder($order)) {
          nostarch_invalid_preorder_message();
        }
        else {
          // it IS a valid pre-order... check for payment method!
          if($order->payment_method == 'paypal_wps') {
            drupal_set_message('<strong>WARNING: If you pay with Paypal, we have to charge you immediately&mdash;we can NOT wait until your item ships to charge you. This is a limitation put in place by PayPal.<br><br> If you do not want to be charged until your pre-ordered item ships, please hit the Back button below and choose to pay by credit card.</strong>', 'warning', FALSE);
          }
        }
      }
      break;

    case 'submit':
      // if they click the final "submit order" button anyway, don't process
      // their payment and warn them again
      if(nostarch_order_contains_preorders($order)) {
        if(!nostarch_is_valid_preorder($order)) {
          return array(array('pass' => FALSE, 'message' => '<strong>YOUR ORDER WAS NOT COMPLETED; YOU WERE NOT CHARGED.</strong>'));
        }
      }
      break;
  }
}


/*
 * Allows for a discount to be modified when it's being loaded/saved/deleted
 */
function nostarch_uc_discount($op, &$discount, $order = NULL) {
  switch($op) {
    case 'load':
      // Modify a discount to not be applied unless a condition passes
      if(!is_null($order)) {

        // if there's a uc_coupon discount, don't apply the special discount
        if(nostarch_cart_contains_coupon()) {
          $discount->is_active = FALSE;
        }

        // If there's a product kit in the order, don't apply discount.
        // TODO: still apply discount to non-product-kit products instead
        // of this catch-all approach.
        if(is_array($order->products) && !empty($order->products)) {
          foreach($order->products as $product) {
            if(!empty($product->data['kit_id'])) {
              $discount->is_active = FALSE;
            }
          }
        }
      }
      break;
  }
}


/*
 * Implemenation of hook_order_operations()
 *
 * This defines the functions that can be called from various views, including
 * the "order management" page. Makes processing orders way easier. Actual
 * implementation of these functions below.
 */
function nostarch_order_operations() {
  return array(
    'export_address_csv' => array(
      'label' => t("Export addresses as a CSV file"),
      'callback' => 'nostarch_orders_export_addresses_csv',
      'disabled' => TRUE,
    ),
    'export_orders_csv' => array(
      'label' => t("Export orders as a CSV file"),
      'callback' => 'nostarch_orders_export_orders_csv',
      'disabled' => TRUE,
    ),
    'set_orders_completed' => array(
      'label' => t("Set order status to Completed"),
      'callback' => 'nostarch_orders_set_status_completed',
      'disabled' => TRUE,
    ),
    'set_orders_pre_pre_ship' => array(
      'label' => t("Set order status to Pre-order pending"),
      'callback' => 'nostarch_orders_set_status_pre_pre_ship',
      'disabled' => TRUE,
    ),
    'set_orders_pre_ship' => array(
      'label' => t("Set order status to Pre-order awaiting shipment"),
      'callback' => 'nostarch_orders_set_status_pre_ship',
      'disabled' => TRUE,
    ),
    'set_orders_canceled' => array(
      'label' => t("Set order status to Canceled"),
      'callback' => 'nostarch_orders_set_status_canceled',
      'disabled' => TRUE,
    ),
  );
}


/*
 * Implementation of hook_action_info()
 *
 * Defines an action that adds ebooks to customers' accounts. It's annoying
 * that I have to do this, since I feel like this should be implemented in the
 * uc_file module. But it's not. Oh well!
 *
 * See also:
 *   nostarch_add_files_action_form
 *   nostarch_add_files_action_validate
 *   nostarch_add_files_action_submit
 *   nostarch_add_files_action
 */
function nostarch_action_info() {
  $info['nostarch_add_files_action'] = array(
    'type' => 'system',
    'description' => 'Add file(s) to users\' accounts',
    'configurable' => TRUE,
    'hooks' => array(
      'any' => TRUE,
    ),
  );

  return $info;
}


/*
 * The form that lets the user select the files to add to the specified
 * accounts.
 */
function nostarch_add_files_action_form($context) {

  // Rebuild the file list.
  uc_file_refresh();

  // Create the list of files able to be attached to this user.
  $available_files = array();

  // Build an array of available file ids and file names
  $files = db_query("SELECT * FROM {uc_files} ORDER BY filename ASC");
  while($file = db_fetch_object($files)) {
    if(substr($file->filename, -1) != '/' && substr($file->filename, -1) != '\\') {
      $available_files[$file->fid] = $file->filename;
    }
  }

  // Build the box to select which files to add
  if(count($available_files)) {
    $form['file_add'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#size' => 15,
      '#title' => t('Add file(s)'),
      '#description' => t('Select a file to add as a download. Newly added files will inherit the settings at the !url.', array('!url' => l(t('Ubercart file product feature settings page'), 'admin/store/settings/products/edit/features'))),
      '#options' => $available_files,
//      '#tree' => TRUE, // this is annoying
    );
  }

  // TODO: A message that says: "Hey! No files!"

  return $form;
}


/*
 * Validate the form. This just screws things up when used through views bulk
 * operations, and running with an empty selection doesn't harm anything.
 * Leaving it commented out for now.
 */
function nostarch_add_files_action_validate($form, $form_state) {
//  if (!count($form_state['values']['file_add'])) {
//    form_set_error('file_add', 'Pick some files, man!');
//  }
}


/*
 * Submit the form values...
 */
function nostarch_add_files_action_submit($form, $form_state) {
  return array(
    'file_add' => $form_state['values']['file_add']
  );
}


/*
 * The Drupal action that adds files to selected users' accounts. This is where
 * the real magic happens.
 */
function nostarch_add_files_action($object, $context) {
  $user_id = $object->uid;
  $files_to_add = $context['file_add'];

  // load the user object
  $user = user_load(array('uid' => $user_id));

  // no limits!
  $limits['download_limit'] = 0;
  $limits['address_limit'] = 0;
  $limits['expiration_limit'] = 0;

  foreach($files_to_add as $file_id) {
    // Last value is $force_overwrite... keep TRUE if we want to overwrite this
    // assignment, reset the limits even if the user already has access?
    // Shouldn't matter in our case sense all the limits will always be 0.
    uc_file_user_renew($file_id, $user, NULL, $limits, TRUE);
  }
}


/*
 * Output order ID and shipping addresses for selected orders. Particularly
 * useful for making mailing labels when dealing with large amounts of orders.
 *
 * This spits out a CSV in sites/default/files/bulk_ops_output and exposes a
 * download link to it when finished. Note that this file is "safe" from prying
 * eyes due to the filename and location, but you should still delete it or
 * move it once it's retrieved.
 */
function nostarch_orders_export_addresses_csv($order_ids) {

  // open the file, give unique name w/ timestamp
  $fileName = "sites/default/files/bulk_ops_output/addresses-" . time() . ".csv";
  $fh = fopen($fileName, 'w') or die("oh junk guys, can't open the file");

  // write headings... used by ShipRush to make life easier
  $heading = "OrderID;ShippingCompany;ShippingContact;ShippingAddress1;ShippingAddress2;ShippingCity;ShippingState;ShippingCountry;ShippingPostalCode;TotalAmount;TotalWeight;Reference;TrackingNumber\n";
  fwrite($fh, $heading);

  foreach($order_ids as $order_id) {
    $order = uc_order_load($order_id);

    // uncomment when debugging
//    $results = print_r($order, true);
//    drupal_set_message($results);

    $company = $order->delivery_company;
    $name = $order->delivery_first_name . " " . $order->delivery_last_name;
    $address1 = $order->delivery_street1;
    $address2 = $order->delivery_street2;
    $city = $order->delivery_city;
    $state = uc_get_zone_code($order->delivery_zone); // states/provinces are stored by numeric code
    $postal_code = $order->delivery_postal_code;

    // getting the country is a bit more complex...
    $country_data = uc_get_country_data(array('country_id' => $order->delivery_country));
    $country = $country_data[0]['country_name'];

    // Output semicolon delimited, csv-style
    // Some of these ("TotalAmount" for instance) are mystery fields...
    // Also, everything should be uppercase for some stupid reason
    $outputString = strtoupper(
                    $order_id . ";" . $company . ";" . $name . ";" .
                    $address1 . ";" . $address2 . ";" . $city . ";" .
                    $state . ";" . $country . ";" . $postal_code . ";" .
                    "" . ";" . "" . ";" . "Paperback book\n"
                    );

    // write one line
    fwrite($fh, $outputString);
  }

  // close the file
  fclose($fh);

  // download link
  $message = 'If all went well, you should be able to download the csv <a href="' . '/' . $fileName . '">here</a>.';
  drupal_set_message($message);
}


/*
 * Output some useful bullshit: order id, subtotal, coupon value, tax, total,
 * &c.
 *
 * This spits out a CSV in sites/default/files/bulk_ops_output and exposes a
 * download link to it when finished. Note that this file is "safe" from prying
 * eyes due to the filename and location, but you should still delete it or
 * move it once it's retrieved.
 */
function nostarch_orders_export_orders_csv($order_ids) {

  // open the file, give unique name w/ timestamp
  $fileName = "sites/default/files/bulk_ops_output/orders-" . time() . ".csv";
  $fh = fopen($fileName, 'w') or die("oh junk guys, can't open the file");

  // label the CSV columns
  $col_labels = "ORDER NUM;SUBTOTAL;COUPON AMT;TAX;SHIPPING;ORDER TOTAL;PRODUCTS\n";
  fwrite($fh, $col_labels);

  // loop through each order
  foreach($order_ids as $order_id) {
    $order = uc_order_load($order_id);

    // populate the ubercart token values
    $values = uc_order_token_values('order', $order);

    // used then stripped... stupid
    $context = array( 'location' => 'order-invoice-line-item',
                      'subject' => array(
                      'order' => $order,
                      ),
                    );

    // set default values for tax, shipping, and coupons... if the line items
    // exist, these values will be overwritten
    $tax = '$0.00';
    $shipping = '$0.00';
    $coupon = '$0.00';

    foreach ($order->line_items as $item) {

      // test for tax
      $tax_ret = stripos($item['title'], "tax");
      if($tax_ret !== false) { // there is tax!
        $tax = strip_tags(uc_price($item['amount'], $context));
      }

      // test for shipping
      $ship_ret = stripos($item['title'], "usps");
      if($ship_ret !== false) { // there is shipping!
        $shipping = strip_tags(uc_price($item['amount'], $context));
      }

      // test for coupon
      $coup_ret = stripos($item['title'], "coupon");
      if($coup_ret !== false) { // there is coupon!
        $coupon = strip_tags(uc_price($item['amount'], $context));
      }
    }

    // now loop through and grab products in order so we can output the SKUs
    $skus_in_order = ''; // a string, semicolon-delimited
    foreach($order->products as $product) {
      $skus_in_order = $skus_in_order . ';' . $product->model;
    }

    // output semicolon delimited, csv-style
    // ie: order id;subtotal;coupon;tax;shipping;order total
    $outputString = $values['order-id'] . ";" . $values['order-subtotal'] . ";" . $coupon . ";" . $tax . ";" . $shipping . ";" . $values['order-total'] . $skus_in_order . "\n";

    // write one line (order) to the output file
    fwrite($fh, $outputString);
  }

  // close the file
  fclose($fh);

  // download link
  $message = 'If all went well, you should be able to download the csv <a href="' . '/' . $fileName . '">here</a>.';
  drupal_set_message($message);
}


/*
 * Set order statuses in bulk
 *
 * TODO: make it easier to set arbitrary statuses rather than hard-coding them
 * like this.
 */
function nostarch_orders_set_status_completed($order_ids) {
  foreach($order_ids as $order_id) {
    uc_order_update_status($order_id, "completed");
  }
}
function nostarch_orders_set_status_pre_pre_ship($order_ids) {
  foreach($order_ids as $order_id) {
    uc_order_update_status($order_id, "pre-pre_ship");
  }
}
function nostarch_orders_set_status_pre_ship($order_ids) {
  foreach($order_ids as $order_id) {
    uc_order_update_status($order_id, "pre_ship");
  }
}
function nostarch_orders_set_status_canceled($order_ids) {
  foreach($order_ids as $order_id) {
    uc_order_update_status($order_id, "canceled");
  }
}
