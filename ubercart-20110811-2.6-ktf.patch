diff -ur ubercart/shipping/uc_quote/uc_quote.module ubercart-ktf/shipping/uc_quote/uc_quote.module
--- ubercart/shipping/uc_quote/uc_quote.module	2011-07-29 16:00:20.000000000 -0700
+++ ubercart-ktf/shipping/uc_quote/uc_quote.module	2011-08-11 11:18:49.195719232 -0700
@@ -177,6 +177,7 @@
       '#type' => 'fieldset',
       '#title' => t('Shipping settings'),
       '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
       '#weight' => module_exists('content') ? content_extra_field_weight($form['#node']->type, 'shipping') : 0,
       '#attributes' => array('class' => 'product-shipping'),
     );
Only in ubercart-ktf/shipping/uc_quote: uc_quote.module.orig
diff -ur ubercart/uc_attribute/uc_attribute.admin.inc ubercart-ktf/uc_attribute/uc_attribute.admin.inc
--- ubercart/uc_attribute/uc_attribute.admin.inc	2011-07-29 16:00:20.000000000 -0700
+++ ubercart-ktf/uc_attribute/uc_attribute.admin.inc	2011-08-11 11:18:49.145720138 -0700
@@ -250,6 +250,9 @@
       'price' => array(
         '#value' => $data->price,
       ),
+      'multiplier' => array(
+        '#value' => $data->multiplier,
+      ),
       'weight' => array(
         '#value' => $data->weight,
       ),
@@ -301,7 +304,7 @@
  */
 function theme_uc_attribute_options_form($form) {
 
-  $header = array(t('Name'), t('Default cost'), t('Default price'), t('Default weight'), array('data' => t('List position'), 'sort' => 'asc'), t('Operations'));
+  $header = array(t('Name'), t('Default cost'), t('Default price'), t('Default multiplier'), t('Default weight'), array('data' => t('List position'), 'sort' => 'asc'), t('Operations'));
 
   if (count(element_children($form['options'])) > 0) {
     foreach (element_children($form['options']) as $oid) {
@@ -309,6 +312,7 @@
         drupal_render($form['options'][$oid]['name']),
         drupal_render($form['options'][$oid]['cost']),
         drupal_render($form['options'][$oid]['price']),
+        drupal_render($form['options'][$oid]['multiplier']),
         drupal_render($form['options'][$oid]['weight']),
         drupal_render($form['options'][$oid]['ordering']),
         drupal_render($form['options'][$oid]['ops']),
@@ -383,7 +387,7 @@
     '#title' => t('List position'),
     '#description' => t('Options will be listed sorted by this value and then by their name.<br />May be overridden at the product level.'),
     '#default_value' => isset($option->ordering) ? $option->ordering : 0,
-    '#weight' => 4,
+    '#weight' => 5,
   );
   $form['adjustments'] = array(
     '#type' => 'fieldset',
@@ -404,11 +408,17 @@
     '#default_value' => uc_store_format_price_field_value($option->price),
     '#weight' => 2,
   );
+  $form['adjustments']['multiplier'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Multiplier'),
+    '#default_value' => uc_store_format_price_field_value($option->multiplier),
+    '#weight' => 3,
+  );
   $form['adjustments']['weight'] = array(
     '#type' => 'textfield',
     '#title' => t('Weight'),
     '#default_value' => $option->weight,
-    '#weight' => 3,
+    '#weight' => 4,
   );
 
   $form['submit'] = array(
@@ -435,6 +445,9 @@
   if (!is_numeric($form_state['values']['price']['#value']) && !preg_match($pattern, $form_state['values']['price']['#value'])) {
     form_set_error('price', $price_error);
   }
+  if (!is_numeric($form_state['values']['multiplier']['#value'])) {
+    form_set_error('multiplier', t('This must be in a valid number format.'));
+  }
   if (!is_numeric($form_state['values']['weight']['#value']) && !preg_match($pattern, $form_state['values']['weight']['#value'])) {
     form_set_error('weight', $price_error);
   }
@@ -445,16 +458,16 @@
  */
 function uc_attribute_option_form_submit($form, &$form_state) {
   if (!isset($form_state['values']['oid'])) {
-    db_query("INSERT INTO {uc_attribute_options} (aid, name, cost, price, weight, ordering) VALUES (%d, '%s', %f, %f, %f, %d)",
-      $form_state['values']['aid'], $form_state['values']['name'], $form_state['values']['cost'], $form_state['values']['price'], $form_state['values']['weight'], $form_state['values']['ordering']);
+    db_query("INSERT INTO {uc_attribute_options} (aid, name, cost, price, multiplier, weight, ordering) VALUES (%d, '%s', %f, %f, %f, %f, %d)",
+      $form_state['values']['aid'], $form_state['values']['name'], $form_state['values']['cost'], $form_state['values']['price'], $form_state['values']['multiplier'], $form_state['values']['weight'], $form_state['values']['ordering']);
     $form_state['values']['oid'] = db_last_insert_id('uc_attribute_options', 'oid');
     drupal_set_message(t('Created new option %option.', array('%option' => $form_state['values']['name'])));
     watchdog('uc_attribute', 'Created new option %option.', array('%option' => $form_state['values']['name']), WATCHDOG_NOTICE, 'admin/store/attributes/'. $form_state['values']['aid'] .'/options/add');
     $form_state['redirect'] = 'admin/store/attributes/'. $form_state['values']['aid'] .'/options/add';
   }
   else {
-    db_query("UPDATE {uc_attribute_options} SET name = '%s', cost = %f, price = %f, weight = %f, ordering = %d WHERE aid = %d AND oid = %d",
-      $form_state['values']['name'], $form_state['values']['cost'], $form_state['values']['price'], $form_state['values']['weight'], $form_state['values']['ordering'], $form_state['values']['aid'], $form_state['values']['oid']);
+    db_query("UPDATE {uc_attribute_options} SET name = '%s', cost = %f, price = %f, multiplier = %f, weight = %f, ordering = %d WHERE aid = %d AND oid = %d",
+      $form_state['values']['name'], $form_state['values']['cost'], $form_state['values']['price'], $form_state['values']['multiplier'], $form_state['values']['weight'], $form_state['values']['ordering'], $form_state['values']['aid'], $form_state['values']['oid']);
     drupal_set_message(t('Updated option %option.', array('%option' => $form_state['values']['name'])));
     watchdog('uc_attribute', 'Updated option %option.', array('%option' => $form_state['values']['name']), WATCHDOG_NOTICE, 'admin/store/attributes/'. $form_state['values']['aid'] .'/options/'. $form_state['values']['oid']);
     $form_state['redirect'] = 'admin/store/attributes/'. $form_state['values']['aid'] .'/options';
@@ -568,7 +581,7 @@
             '#size' => 6,
           ),
           'option' => array(
-            '#value' => $option ? (check_plain($option->name) .' ('. uc_price($option->price, $context) .')' ) : t('n/a'),
+            '#value' => $option ? (check_plain($option->name) .' ('. uc_price($option->price, $context) .')x('. (string)$option->multiplier.')' ) : t('n/a'),
           ),
           'required' => array(
             '#type' => 'checkbox',
@@ -740,7 +753,7 @@
       // Enable all options for added attributes.
       $attribute = uc_attribute_load($aid);
       foreach ($attribute->options as $option) {
-        db_query("INSERT INTO $opt_table ($id, oid, cost, price, weight, ordering) VALUES ($sql_type, %d, %f, %f, %f, %d)", $form_state['values']['id'], $option->oid, $option->cost, $option->price, $option->weight, $option->ordering);
+        db_query("INSERT INTO $opt_table ($id, oid, cost, price, multiplier, weight, ordering) VALUES ($sql_type, %d, %f, %f, %f, %f, %d)", $form_state['values']['id'], $option->oid, $option->cost, $option->price, $option->multiplier, $option->weight, $option->ordering);
       }
       // Make the first option (if any) the default.
       $option = reset($attribute->options);
@@ -817,7 +830,7 @@
     if ($base_attr->options) {
       $options = array();
 
-      $result = db_query("SELECT ao.aid, ao.oid, ao.name, ao.cost AS default_cost, ao.price AS default_price, ao.weight AS default_weight, ao.ordering AS default_ordering, po.cost, po.price, po.weight, po.ordering, po.ordering IS NULL AS null_order FROM {uc_attribute_options} AS ao LEFT JOIN $table AS po ON ao.oid = po.oid AND po.". $id_type ." = ". $sql_type ." WHERE aid = %d ORDER BY null_order, po.ordering, default_ordering, ao.name", $id, $attribute->aid);
+      $result = db_query("SELECT ao.aid, ao.oid, ao.name, ao.cost AS default_cost, ao.price AS default_price, ao.multiplier AS default_multiplier, ao.weight AS default_weight, ao.ordering AS default_ordering, po.cost, po.price, po.multiplier, po.weight, po.ordering, po.ordering IS NULL AS null_order FROM {uc_attribute_options} AS ao LEFT JOIN $table AS po ON ao.oid = po.oid AND po.". $id_type ." = ". $sql_type ." WHERE aid = %d ORDER BY null_order, po.ordering, default_ordering, ao.name", $id, $attribute->aid);
       while ($option = db_fetch_object($result)) {
         $oid = $option->oid;
         $options[$oid] = '';
@@ -837,7 +850,12 @@
           '#default_value' => uc_store_format_price_field_value(is_null($option->price) ? $option->default_price : $option->price),
           '#size' => 6,
         );
-        $form['attributes'][$aid]['options'][$oid]['weight'] = array(
+         $form['attributes'][$aid]['options'][$oid]['multiplier'] = array(
+          '#type' => 'textfield',
+          '#default_value' => uc_store_format_price_field_value(is_null($option->multiplier) ? $option->default_multiplier : $option->multiplier),
+          '#size' => 6,
+        );
+       $form['attributes'][$aid]['options'][$oid]['weight'] = array(
           '#type' => 'textfield',
           '#default_value' => is_null($option->weight) ? $option->default_weight : $option->weight,
           '#size' => 5,
@@ -895,7 +913,7 @@
 function theme_uc_object_options_form($form) {
   $output = '';
 
-  $header = array(array('data' => '&nbsp;&nbsp;'. t('Options')) + theme('table_select_header_cell'), t('Default'), t('Cost'), t('Price'), t('Weight'), t('List position'));
+  $header = array(array('data' => '&nbsp;&nbsp;'. t('Options')) + theme('table_select_header_cell'), t('Default'), t('Cost'), t('Price'), t('Multiplier'), t('Weight'), t('List position'));
   $table_id_num = $tables = 0;
 
   foreach (element_children($form['attributes']) as $key) {
@@ -910,7 +928,8 @@
           drupal_render($form['attributes'][$key]['default'][$oid]),
           drupal_render($form['attributes'][$key]['options'][$oid]['cost']),
           drupal_render($form['attributes'][$key]['options'][$oid]['price']),
-          drupal_render($form['attributes'][$key]['options'][$oid]['weight']),
+          drupal_render($form['attributes'][$key]['options'][$oid]['multiplier']),
+		  drupal_render($form['attributes'][$key]['options'][$oid]['weight']),
           drupal_render($form['attributes'][$key]['options'][$oid]['ordering']),
         );
 
@@ -924,7 +943,7 @@
     }
     else {
       $row = array();
-      $row[] = array('data' => drupal_render($form['attributes'][$key]['default']), 'colspan' => 6);
+      $row[] = array('data' => drupal_render($form['attributes'][$key]['default']), 'colspan' => 7);
       $rows[] = $row;
     }
 
@@ -979,7 +998,10 @@
         $optionstr .= t(', !option', array('!option' => $option));
       }
     }
-    $option_rows[$key] = t('@attribute: @option', array('@attribute' => $element[$key]['#attribute_name'], '@option' => $optionstr));
+//    $option_rows[$key] = t('@attribute: @option', array('@attribute' => $element[$key]['#attribute_name'], '@option' => $optionstr));
+    //KF: don't show the attribute name... it looks stupid
+    //    also strip HTML, which is now allowed thanks to another stupid hack of mine
+    $option_rows[$key] = t('@option', array('@option' => strip_tags($optionstr)));
   }
 
   if (!empty($option_rows)) {
@@ -1044,8 +1066,8 @@
         db_query("DELETE FROM $opt_table WHERE $id = $sql_type AND oid = %d", $form_state['values']['id'], $oid);
 
         if ($option['select']) {
-          db_query("INSERT INTO $opt_table ($id, oid, cost, price, weight, ordering) VALUES ($sql_type, %d, %f, %f, %f, %d)",
-                   $form_state['values']['id'], $oid, $option['cost'], $option['price'], $option['weight'], $option['ordering']);
+          db_query("INSERT INTO $opt_table ($id, oid, cost, price, multiplier, weight, ordering) VALUES ($sql_type, %d, %f, %f, %f, %f, %d)",
+                   $form_state['values']['id'], $oid, $option['cost'], $option['price'], $option['multiplier'], $option['weight'], $option['ordering']);
         }
         elseif ($form_state['values']['type'] == 'product') {
           $aid = $attribute['aid'];
diff -ur ubercart/uc_attribute/uc_attribute.module ubercart-ktf/uc_attribute/uc_attribute.module
--- ubercart/uc_attribute/uc_attribute.module	2011-07-29 16:00:20.000000000 -0700
+++ ubercart-ktf/uc_attribute/uc_attribute.module	2011-08-11 11:18:49.145720138 -0700
@@ -350,11 +350,11 @@
           case 'mysqli':
           case 'mysql':
             db_query("INSERT IGNORE INTO {uc_product_attributes} (nid, aid, label, ordering, required, display, default_option) SELECT %d, aid, label, ordering, required, display, default_option FROM {uc_class_attributes} WHERE pcid = '%s'", $node->nid, $node->type);
-            db_query("INSERT IGNORE INTO {uc_product_options} (nid, oid, cost, price, weight, ordering) SELECT %d, oid, cost, price, weight, ordering FROM {uc_class_attribute_options} WHERE pcid = '%s'", $node->nid, $node->type);
+            db_query("INSERT IGNORE INTO {uc_product_options} (nid, oid, cost, price, multiplier, weight, ordering) SELECT %d, oid, cost, price, multiplier, weight, ordering FROM {uc_class_attribute_options} WHERE pcid = '%s'", $node->nid, $node->type);
             break;
           case 'pgsql':
             db_query("INSERT INTO {uc_product_attributes} (nid, aid, label, ordering, required, display, default_option) SELECT %d, aid, label, ordering, required, display, default_option FROM {uc_class_attributes} WHERE pcid = '%s'", $node->nid, $node->type);
-            db_query("INSERT INTO {uc_product_options} (nid, oid, cost, price, weight, ordering) SELECT %d, oid, cost, price, weight, ordering FROM {uc_class_attribute_options} WHERE pcid = '%s'", $node->nid, $node->type);
+            db_query("INSERT INTO {uc_product_options} (nid, oid, cost, price, multiplier, weight, ordering) SELECT %d, oid, cost, price, multiplier, weight, ordering FROM {uc_class_attribute_options} WHERE pcid = '%s'", $node->nid, $node->type);
             break;
         }
 
@@ -454,16 +454,21 @@
       $options = _uc_cart_product_get_options($item);
 
       $op_costs = 0;
-      $op_prices = 0;
+      $op_prices = $item->price;
       $op_weight = 0;
 
       foreach ($options as $option) {
         $op_costs += $option['cost'];
         $op_prices += $option['price'];
+		if ($option['multiplier'] < 0 || $option['multiplier'] > 0) {
+			$op_prices = $op_prices * $option['multiplier'];
+      //KF: want the price to always be xx.95
+      $op_prices = ceil($op_prices) - 0.05;
+		}
         $op_weight += $option['weight'];
       }
       $item->cost += $op_costs;
-      $item->price += $op_prices;
+      $item->price = $op_prices;
       $item->weight += $op_weight;
 
       $combination = array();
@@ -644,7 +649,7 @@
 
       // Read option data.
       $result = db_query("
-        SELECT    po.{$sql['id']}, po.oid, po.cost, po.price, po.weight, po.ordering, ao.name,
+        SELECT    po.{$sql['id']}, po.oid, po.cost, po.price, po.multiplier, po.weight, po.ordering, ao.name,
                   ao.aid
         FROM      {$sql['opt_table']} AS po
         LEFT JOIN {uc_attribute_options} AS ao ON po.oid = ao.oid AND
@@ -1123,6 +1128,7 @@
             'name' => $selected,
             'cost' => 0,
             'price' => 0,
+			'multiplier' => 0,
             'weight' => 0,
           );
         }
@@ -1169,29 +1175,36 @@
     $options = array();
     foreach ($attribute->options as $option) {
       $context['subject']['option'] = $option;
+      // KF: adjusting, allows use of multiplier
+      $adjusted_price = $product->sell_price + $option->price;
       switch (variable_get('uc_attribute_option_price_format', 'adjustment')) {
         case 'total':
           $context['type'] = 'product';
           $context['subject']['node'] = $product;
-          $display_price = in_array($attribute->aid, $priced_attributes) ? ', '. uc_price($product->sell_price + $option->price, $context) : '';
+          if ($option->multiplier < 0 || $option->multiplier > 0) {
+            $adjusted_price = $adjusted_price * $option->multiplier;
+            $adjusted_price = ceil($adjusted_price) - 0.05; // KF: price always xx.95
+          }
+          $display_price = in_array($attribute->aid, $priced_attributes) ? ' '. uc_price($adjusted_price, $context) : ''; // KF: remove comma, adjust
           if (count($priced_attributes) == 1 && $attribute->display != 3) {
             break;
           }
         case 'adjustment':
           $context['type'] = 'attribute_option';
-          $display_price = ($option->price != 0 ? ', '. ($option->price > 0 ? '+' : '') . uc_price($option->price, $context) : '');
+          // KF: TODO: this doesn't really work w/ multipliers, but we don't use them so oh well...
+          $display_price = ($option->price != 0 ? ' '. ($option->price > 0 ? '+' : '') . uc_price($option->price, $context) : ''); // KF: remove comma
           break;
         case 'none':
         default:
           $display_price = '';
           break;
       }
-      $options[$option->oid] = $option->name;
+      $options[$option->oid] = $display_price . ' '; // KF: space after price, reorder so price comes first
+      $options[$option->oid] .= $option->name;
       if ($attribute->display == 2) {
         // Select options are check_plain()ed, but radio button labels are not.
-        $options[$option->oid] = check_plain($options[$option->oid]);
+//        $options[$option->oid] = check_plain($options[$option->oid]); // KF: allow HTML in attributes, for fanciness
       }
-      $options[$option->oid] .= $display_price;
     }
 
     if (count($attribute->options) && $attribute->display > 0) {
@@ -1263,7 +1276,7 @@
  *   Array of attribute ids that have price affecting options.
  */
 function uc_attribute_priced_attributes($nid) {
-  $attributes = db_query("SELECT DISTINCT (pa.aid) FROM {uc_product_attributes} AS pa INNER JOIN {uc_attribute_options} AS ao ON ao.aid = pa.aid INNER JOIN {uc_product_options} AS po ON (po.oid = ao.oid AND po.nid = pa.nid) WHERE pa.nid = %d AND po.price <> 0 AND pa.display <> 0", $nid);
+  $attributes = db_query("SELECT DISTINCT (pa.aid) FROM {uc_product_attributes} AS pa INNER JOIN {uc_attribute_options} AS ao ON ao.aid = pa.aid INNER JOIN {uc_product_options} AS po ON (po.oid = ao.oid AND po.nid = pa.nid) WHERE pa.nid = %d AND (po.price <> 0 OR po.multiplier <> 0) AND pa.display <> 0", $nid);
   $aids = array();
   while ($attribute = db_fetch_array($attributes)) {
     $aids[] = $attribute['aid'];
diff -ur ubercart/uc_order/uc_order.ca.inc ubercart-ktf/uc_order/uc_order.ca.inc
--- ubercart/uc_order/uc_order.ca.inc	2011-07-29 16:00:20.000000000 -0700
+++ ubercart-ktf/uc_order/uc_order.ca.inc	2011-08-11 11:18:49.175718505 -0700
@@ -733,9 +733,17 @@
   $totals = array('all' => 0);
   $total = 0;
   foreach ($order->products as $product) {
+
+    // KF: When someone buys a non-shippable item (ie a file), it should NOT have a weight.
+    $result = db_query("SELECT * FROM {uc_file_products} WHERE model = '%s'", $product->model);
+    $actually_shippable = 1; // default to 1 -- if it's not in this table, it's physical goods and is shippable
+    while($data = db_fetch_object($result)) {
+      $actually_shippable = $data->shippable;
+    }
+
     $unit_conversion = uc_weight_conversion($product->weight_units, $settings['weight_units']);
-    $totals['all'] += $product->qty * $product->weight * $unit_conversion;
-    $totals[$product->model] = $product->qty * $product->weight * $unit_conversion;
+    $totals['all'] += $product->qty * $product->weight * $unit_conversion * $actually_shippable; // if it's not shippable, this sets weight to 0, otherwise unchanged
+    $totals[$product->model] = $product->qty * $product->weight * $unit_conversion * $actually_shippable; // same here
   }
   if (in_array('all', $settings['products'])) {
     $total = $totals['all'];
Only in ubercart-ktf/uc_order: uc_order.ca.inc.orig
diff -ur ubercart/uc_taxes/uc_taxes.module ubercart-ktf/uc_taxes/uc_taxes.module
--- ubercart/uc_taxes/uc_taxes.module	2011-07-29 16:00:20.000000000 -0700
+++ ubercart-ktf/uc_taxes/uc_taxes.module	2011-08-11 11:18:49.175718505 -0700
@@ -500,9 +500,16 @@
     $node->shippable = $item->weight > 0;
   }
 
+  // KF: $node->shippable doesn't account for non-shippable attributes (ie file downloads)
+  $result = db_query("SELECT * FROM {uc_file_products} WHERE model = '%s'", $item->model);
+  $actually_shippable = 1; // default to 1 -- if it's not in this table, it's physical goods and is shippable
+  while($data = db_fetch_object($result)) {
+    $actually_shippable = $data->shippable;
+  }
+
   // Tax products if they are of a taxed type and if it is shippable if
   // the tax only applies to shippable products.
-  if (in_array($node->type, $tax->taxed_product_types) && ($tax->shippable == 0 || $node->shippable == 1)) {
+  if (in_array($node->type, $tax->taxed_product_types) && ($tax->shippable == 0 || $actually_shippable == 1)) { // KF: if it's ACTUALLY shippable
     $context = array(
       'revision' => 'altered',
       'type' => 'cart_item',
@@ -558,6 +565,19 @@
     }
   }
   $amount = $taxable_amount * $tax->rate;
+
+  /* KF: A nasty hack to keep from calculating negative taxes in the the event
+     of an order that meets the following criteria:
+     1) In CA 
+     2) Both physical and electronic items 
+     3) Using a coupon code
+
+     TODO: Fucking figure out how to make uc_taxes and uc_coupon not suck.
+   */
+  if ($amount < 0) {
+    $amount = 0;
+  }
+
   if ($amount) {
     $line_item = (object)array(
       'id' => $tax->id,
